package wallFollower;
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class PController implements UltrasonicController {
	
	private final int bandCenter, bandwidth;
	private final int motorStraight = 200, FILTER_OUT = 20;
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	private int distance;
	private int filterControl;
	
	public PController(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
					   int bandCenter, int bandwidth) {
		//Default Constructor
		this.bandCenter = bandCenter;
		this.bandwidth = bandwidth;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		leftMotor.setSpeed(motorStraight);					// Initalize motor rolling forward
		rightMotor.setSpeed(motorStraight);
		leftMotor.forward();
		rightMotor.forward();
		filterControl = 0;
	}
	
	@Override
	public void processUSData(int distance) {
		
		// rudimentary filter - toss out invalid samples corresponding to null signal.
		// (n.b. this was not included in the Bang-bang controller, but easily could have).
		//
		if (distance == 255 && filterControl < FILTER_OUT) {
			// bad value, do not set the distance var, however do increment the filter value
			filterControl ++;
		} else if (distance == 255){
			// true 255, therefore set distance to 255
			this.distance = distance;
		} else {
			// distance went below 255, therefore reset everything.
			filterControl = 0;
			this.distance = distance;
		}
		
		// TODO: process a movement based on the us distance passed in (P style)	
	int distError=this.distance-bandCenter;	// Compute error
	if (distError >= 20) distError=20;
	else if (distError <= -20) distError=-20;
	

	
	leftMotor.setSpeed(motorStraight);
	rightMotor.setSpeed(motorStraight+10*distError);
	leftMotor.forward();
	rightMotor.forward();
	
//	if (Math.abs(distError) <= bandwidth) {	// Within limits, same speed
//		leftMotor.setSpeed(motorHigh);	// Start moving forward
//		rightMotor.setSpeed(motorHigh);
//		leftMotor.forward();
//		rightMotor.forward();				
//		}
//		
//	else if (distError < 0) {			// Too close to the wall
//			leftMotor.setSpeed(motorHigh*);
//			rightMotor.setSpeed(motorLow);
//			leftMotor.forward();
//			rightMotor.forward();
//						
//		}
//		
//	else if (distError > 0) {
//			leftMotor.setSpeed(motorLow+80);
//			rightMotor.setSpeed(motorHigh+50);
//			leftMotor.forward();
//			rightMotor.forward();			
//		}
		
			}

	
	@Override
	public int readUSDistance() {
		return this.distance;
	}

}
