/* 
 * OdometryCorrection.java
 */
package ev3Odometer;

import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorMode;
import lejos.robotics.Color;

public class OdometryCorrection extends Thread {
	private static final long CORRECTION_PERIOD = 10;
	private Odometer odometer;
	private static EV3ColorSensor sensor = new EV3ColorSensor(LocalEV3.get().getPort("S2"));
	private SensorMode mode;
	private Object lock;

	// constructor
	public OdometryCorrection(Odometer odometer) {
		this.odometer = odometer;
		// Mode to sense colors
		sensor.getColorIDMode();
		mode= sensor.getRedMode();
		// Turn on white LED
		sensor.setFloodlight(Color.RED);
	}

	// run method (required for Thread)
	public void run() {
		long correctionStart, correctionEnd;

		while (true) {
			synchronized (lock) {
				correctionStart = System.currentTimeMillis();
				// Check the sensor for a black line
				if (sensor.getColorID() == 1) {
					// Rounds the position to the nearest multiple of 15 and nearest Pi/2 for angle
					Sound.beep();
					double newX = Math.round(odometer.getX()/15)*15;
					double newY = Math.round(odometer.getY()/15)*15;
					double newTheta = Math.round(odometer.getTheta()/(Math.PI / 2))* (Math.PI)/2 ;
					// Set these new values in the odometer
					double[] newPos = {newX,newY,newTheta};
					boolean[] newUpdate = {true,true,true};
					odometer.setPosition(newPos,newUpdate);
				}

				// this ensure the odometry correction occurs only once every
				// period
				correctionEnd = System.currentTimeMillis();
				if (correctionEnd - correctionStart < CORRECTION_PERIOD) {
					try {
						Thread.sleep(CORRECTION_PERIOD
								- (correctionEnd - correctionStart));
					} catch (InterruptedException e) {
						// there is nothing to be done here because it is not
						// expected that the odometry correction will be
						// interrupted by another thread
					}
				}
			}
		}
	}
}