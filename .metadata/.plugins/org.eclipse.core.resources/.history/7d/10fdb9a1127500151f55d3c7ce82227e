package ev3ObjectSearch;
import ev3Drive.Odometer;
import ev3Localization.USLocalizer;
import ev3Sensors.FilteredColorPoller;
import ev3Sensors.FilteredUltrasonicPoller;
import ev3Sensors.MaxValueFilter;
import lejos.hardware.*;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;
import lejos.robotics.filter.MeanFilter;

public class Lab5 {

	// Static Resources:
	// Left motor connected to output A
	// Right motor connected to output D
	// Ultrasonic sensor port connected to input S1
	// Color sensor port connected to input S2
	private static final EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("A"));
	private static final EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("D"));
	private static final Port usPort = LocalEV3.get().getPort("S1");
	private static final Port colorPort = LocalEV3.get().getPort("S2");

	// Variables
	private static final float maxUltrasonicReading = 2.0f; // Max value for us clipping filter
	private static final int usReadingsToMedian = 5;
	private static final int colorReadingsToMedian = 5;
	public static void main(String[] args) {
		int buttonChoice = 0;
		// Ultrasonic Sensor Initialization
		SensorModes usSensor = new EV3UltrasonicSensor(usPort);
		FilteredUltrasonicPoller usPoller = new FilteredUltrasonicPoller(usSensor,maxUltrasonicReading,usReadingsToMedian);
		//

		// Color Sensor Initialization
		SensorModes colorSensor = new EV3ColorSensor(colorPort);
		FilteredColorPoller colorPoller = new FilteredColorPoller(colorSensor,colorReadingsToMedian);
		//
		//Object Search Initialization
		ObjectPoller objectPoller= new ObjectPoller(usPoller,colorPoller);

		// Odometer and Display
		Odometer odo = new Odometer(leftMotor, rightMotor, 30, true);

		// User Interface
		(new Thread() {
			public void run() {
				while (Button.waitForAnyPress() != Button.ID_ESCAPE)
					;
				System.exit(0);
			}
		}).start();

		do {
			buttonChoice = Button.waitForAnyPress();
		}

		while (buttonChoice != Button.ID_LEFT && buttonChoice != Button.ID_RIGHT && buttonChoice != Button.ID_UP && buttonChoice != Button.ID_DOWN);

		// Left Button
		if (buttonChoice == Button.ID_LEFT) {
//			 perform the ultrasonic localization with falling edge
			usPoller.start();
			colorPoller.start();
			objectPoller.start();
			USLocalizer usl = new USLocalizer(odo, usPoller, USLocalizer.LocalizationType.FALLING_EDGE);
			usl.doLocalization();
			LCDInfo lcd = new LCDInfo(odo, usPoller,colorPoller,objectPoller);

		}
		
		// Right Button
		else if (buttonChoice == Button.ID_RIGHT) {

			// perform the ultrasonic localization with rising edge
			usPoller.start();
			colorPoller.start();
			objectPoller.start();
			USLocalizer usl = new USLocalizer(odo, usPoller, USLocalizer.LocalizationType.RISING_EDGE);
			usl.doLocalization();
			LCDInfo lcd = new LCDInfo(odo, usPoller,colorPoller,objectPoller);

//
//			LightLocalizer lsl = new LightLocalizer(odo, colorFilteredSource, colorData);
//			lsl.doLocalization();

		}

		// Up Button
		else if (buttonChoice == Button.ID_UP) {
			// Float motors and start sensors for debugging
			usPoller.start();
			colorPoller.start();
			objectPoller.start();
			LCDInfo lcd = new LCDInfo(odo, usPoller,colorPoller,objectPoller);
			leftMotor.forward();
			leftMotor.flt();
			rightMotor.forward();
			rightMotor.flt();
		}

		// Down Button
		else if (buttonChoice == Button.ID_DOWN) {
			// board search
			usPoller.start();
			colorPoller.start();
			objectPoller.start();
			ObjectSearch objectSearch = new ObjectSearch(odo,objectPoller);
			objectSearch.doBoardSearch();
			LCDInfo lcd = new LCDInfo(odo, usPoller,colorPoller,objectPoller);


		}

	}

}
