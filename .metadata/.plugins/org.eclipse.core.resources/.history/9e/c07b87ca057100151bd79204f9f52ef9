import lejos.hardware.Sound;
import lejos.robotics.SampleProvider;

public class USLocalizer {
	public enum LocalizationType {
		FALLING_EDGE, RISING_EDGE
	};

	// Variables
	public static float ROTATION_SPEED = 40;
	private int cornerAngle = 225;

	private Odometer odo;
	private SampleProvider usSource;
	private float[] usData;
	private LocalizationType locType;
	private Navigation nav;

	//

	public USLocalizer(Odometer odo, SampleProvider usSource, float[] usData, LocalizationType locType) {
		this.odo = odo;
		this.usSource = usSource;
		this.usData = usData;
		this.locType = locType;
		this.nav = new Navigation(odo);
		nav.start();
	}

	public void doLocalization() {
		double angleA, angleB;

		if (locType == LocalizationType.FALLING_EDGE) {
			nav.setSpeeds(ROTATION_SPEED, -1 * ROTATION_SPEED);
			while (facingWall() != 0) { // read: Rotate clockwise until facing wall == false
			}
			sleep();
			while (facingWall() != 1) { // Rotate clockwise until facing wall == true
			}
			sleep();
			angleA = odo.getAng(); // First wall detected, this is angle A. Switch directions
			Sound.beep();
			nav.setSpeeds(-1 * ROTATION_SPEED, ROTATION_SPEED);
			while (facingWall() != 0) { // Rotate c-clockwise until facing wall == false
			}
			sleep();
			while (facingWall() != 1) { // Rotate c-clockwise until facing wall == true
			}
			sleep();
			angleB = odo.getAng(); // Second wall detected, this is angle B.
			Sound.beep();
			odo.setAng(cornerAngle - (getAngleDistance(angleA, angleB) / 2)); // Fix heading

		} else {
			nav.setSpeeds(ROTATION_SPEED, -1 * ROTATION_SPEED);
			while (facingWall() != 1) { // Rotate clockwise until facing wall == true
			}
			while (facingWall() != 0) { // Rotate clockwise until facing wall == false
			}
			angleA = odo.getAng(); // First wall detected, this is angle A. Switch directions
			Sound.beep();
			nav.setSpeeds(-1 * ROTATION_SPEED, ROTATION_SPEED);
			while (facingWall() != 1) { // Rotate c-clockwise until facing wall == true
			}
			while (facingWall() != 0) { // Rotate c-clockwise until facing wall == false
			}
			angleB = odo.getAng(); // Second wall detected, this is angle B.
			Sound.beep();
			odo.setAng(cornerAngle + (getAngleDistance(angleA, angleB) / 2)); // Fix Heading
		}
		nav.turnTo(0, true);
		nav.setSpeeds(0, 0);
	}

	private int facingWall() {
		// 1 = True, 0 = False , 2 = Don't know
		usSource.fetchSample(usData, 0);
		int facingWall = 2;
		if (usData[0] < 0.34)
			facingWall = 1;
		else if (usData[0] > 0.44)
			facingWall = 0;
		return facingWall;
	}

	public double getAngleDistance(double a, double b) {
		// Given a and b, find the minimum distance between a and b (in degrees)
		// while accounting for angle wrapping
		double result = 0;
		// Find the difference
		result = Math.abs(a - b);
		// Account for wrapping
		if (result > 180) {
			result = -1 * (result - 360);
		}

		return result;
	}
	public void sleep(){
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
